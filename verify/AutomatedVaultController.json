{
    "language": "Solidity",
    "sources": {
      "solidity/contracts/8.13/AutomatedVaultController.sol": {
        "content": "// SPDX-License-Identifier: BUSL\r\n/**\r\n  ∩~~~~∩ \r\n  ξ ･×･ ξ \r\n  ξ　~　ξ \r\n  ξ　　 ξ \r\n  ξ　　 “~～~～〇 \r\n  ξ　　　　　　 ξ \r\n  ξ ξ ξ~～~ξ ξ ξ \r\n　 ξ_ξξ_ξ　ξ_ξξ_ξ\r\nAlpaca Fin Corporation\r\n*/\r\n\r\npragma solidity 0.8.13;\r\n\r\nimport { OwnableUpgradeable } from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\n\r\nimport { ICreditor } from \"./interfaces/ICreditor.sol\";\r\nimport { IDeltaNeutralVault } from \"./interfaces/IDeltaNeutralVault.sol\";\r\nimport { LinkList } from \"./utils/LinkList.sol\";\r\n\r\n/// @title AutomatedVaultController - Controller how much investor can invest in the private automated vault\r\ncontract AutomatedVaultController is OwnableUpgradeable {\r\n  using LinkList for LinkList.List;\r\n\r\n  // --- Events ---\r\n  event LogAddPrivateVaults(address indexed _caller, IDeltaNeutralVault[] _vaults);\r\n  event LogRemovePrivateVaults(address indexed _caller, address[] _vaults);\r\n  event LogSetCreditors(address indexed _caller, ICreditor[] _creditors);\r\n\r\n  // --- Errors ---\r\n  error AutomatedVaultController_Unauthorized();\r\n  error AutomatedVaultController_OutstandingCredit();\r\n  error AutomatedVaultController_InsufficientCredit();\r\n\r\n  // --- State Variables ---\r\n  ICreditor[] public creditors;\r\n  LinkList.List public privateVaults;\r\n\r\n  mapping(address => LinkList.List) public userVaults;\r\n  mapping(address => mapping(address => uint256)) public userVaultShares;\r\n\r\n  /// @notice Initialize Automated Vault Controller\r\n  /// @param _creditors list of credit sources\r\n  /// @param _privateVaults list of private automated vaults\r\n  function initialize(ICreditor[] memory _creditors, IDeltaNeutralVault[] memory _privateVaults) external initializer {\r\n    // sanity check\r\n    uint256 _creditorLength = _creditors.length;\r\n    for (uint8 _i = 0; _i < _creditorLength; _i++) {\r\n      _creditors[_i].getUserCredit(address(0));\r\n    }\r\n\r\n    uint256 _privateVaultLength = _privateVaults.length;\r\n    for (uint8 _i = 0; _i < _privateVaultLength; _i++) {\r\n      _privateVaults[_i].shareToValue(1e18);\r\n    }\r\n\r\n    // effect\r\n    OwnableUpgradeable.__Ownable_init();\r\n    creditors = _creditors;\r\n\r\n    privateVaults.init();\r\n    for (uint8 _i = 0; _i < _privateVaults.length; ) {\r\n      privateVaults.add(address(_privateVaults[_i]));\r\n      unchecked {\r\n        _i++;\r\n      }\r\n    }\r\n  }\r\n\r\n  /// @notice Get total credit for this user\r\n  /// @param _user address of user.\r\n  /// @return _total user's credit in USD value\r\n  function totalCredit(address _user) public view returns (uint256) {\r\n    uint256 _total;\r\n    uint256 _creditorLength = creditors.length;\r\n    for (uint8 _i = 0; _i < _creditorLength; ) {\r\n      _total = _total + creditors[_i].getUserCredit(_user);\r\n      // uncheck overflow to save gas\r\n      unchecked {\r\n        _i++;\r\n      }\r\n    }\r\n    return _total;\r\n  }\r\n\r\n  /// @notice Get used credit for this user\r\n  /// @param _user address of user.\r\n  /// @return _total user's used credit in USD value from depositing into private automated vaults\r\n  function usedCredit(address _user) public view returns (uint256) {\r\n    uint256 _total;\r\n    LinkList.List storage _userVaults = userVaults[_user];\r\n    uint256 _length = _userVaults.length();\r\n\r\n    if (_length == 0) return 0;\r\n\r\n    address _curVault = _userVaults.getNextOf(LinkList.start);\r\n    for (uint8 _i = 0; _i < _length; ) {\r\n      uint256 _share = userVaultShares[_user][_curVault];\r\n      if (_share != 0) _total += IDeltaNeutralVault(_curVault).shareToValue(_share);\r\n      _curVault = _userVaults.getNextOf(_curVault);\r\n      // uncheck overflow to save gas\r\n      unchecked {\r\n        _i++;\r\n      }\r\n    }\r\n\r\n    return _total;\r\n  }\r\n\r\n  /// @notice Get availableCredit credit for this user\r\n  /// @param _user address of user.\r\n  /// @return _total remaining credit of this user\r\n  function availableCredit(address _user) public view returns (uint256) {\r\n    uint256 _total = totalCredit(_user);\r\n    uint256 _used = usedCredit(_user);\r\n    return _total > _used ? _total - _used : 0;\r\n  }\r\n\r\n  /// @notice add private automated vaults\r\n  /// @param _newPrivateVaults list of private automated vaults\r\n  function addPrivateVaults(IDeltaNeutralVault[] memory _newPrivateVaults) external onlyOwner {\r\n    // sanity check\r\n    uint256 _newPrivateVaultLength = _newPrivateVaults.length;\r\n    for (uint8 _i = 0; _i < _newPrivateVaultLength; ) {\r\n      _newPrivateVaults[_i].shareToValue(1e18);\r\n\r\n      privateVaults.add(address(_newPrivateVaults[_i]));\r\n      // uncheck overflow to save gas\r\n      unchecked {\r\n        _i++;\r\n      }\r\n    }\r\n\r\n    emit LogAddPrivateVaults(msg.sender, _newPrivateVaults);\r\n  }\r\n\r\n  /// @notice remove private automated vaults\r\n  /// @param _privateVaultAddresses list of private automated vaults\r\n  function removePrivateVaults(address[] memory _privateVaultAddresses) external onlyOwner {\r\n    // sanity check\r\n    uint256 _newPrivateVaultLength = _privateVaultAddresses.length;\r\n    for (uint8 _i = 0; _i < _newPrivateVaultLength; ) {\r\n      privateVaults.remove(_privateVaultAddresses[_i], privateVaults.getPreviousOf(_privateVaultAddresses[_i]));\r\n      // uncheck overflow to save gas\r\n      unchecked {\r\n        _i++;\r\n      }\r\n    }\r\n\r\n    emit LogRemovePrivateVaults(msg.sender, _privateVaultAddresses);\r\n  }\r\n\r\n  /// @notice set private automated vaults\r\n  /// @param _newCreditors list of credit sources\r\n  function setCreditors(ICreditor[] memory _newCreditors) external onlyOwner {\r\n    // sanity check\r\n    uint256 _newCreditorLength = _newCreditors.length;\r\n    for (uint8 _i = 0; _i < _newCreditorLength; ) {\r\n      _newCreditors[_i].getUserCredit(address(0));\r\n      // uncheck overflow to save gas\r\n      unchecked {\r\n        _i++;\r\n      }\r\n    }\r\n\r\n    // effect\r\n    creditors = _newCreditors;\r\n\r\n    emit LogSetCreditors(msg.sender, _newCreditors);\r\n  }\r\n\r\n  /// @notice record user's automated vault's share from deposit\r\n  /// @param _user share owner\r\n  /// @param _shareAmount amount of automated vault's share\r\n  /// @param _shareValue value of automated vault's share that will be deposited\r\n  function onDeposit(\r\n    address _user,\r\n    uint256 _shareAmount,\r\n    uint256 _shareValue\r\n  ) external {\r\n    // Check\r\n    if (!privateVaults.has(msg.sender)) revert AutomatedVaultController_Unauthorized();\r\n\r\n    if (totalCredit(_user) < (usedCredit(_user) + _shareValue)) revert AutomatedVaultController_InsufficientCredit();\r\n\r\n    // expected delta vault to be the caller\r\n    userVaultShares[_user][msg.sender] += _shareAmount;\r\n\r\n    // set user's state\r\n    _initOrInsertUserVaults(_user, msg.sender);\r\n  }\r\n\r\n  /// @notice update user's automated vault's share from withdrawal\r\n  /// @param _user share owner\r\n  /// @param _shareAmount amount of automated vault's share withdrawn\r\n  function onWithdraw(address _user, uint256 _shareAmount) external {\r\n    uint256 _updatedShare = userVaultShares[_user][msg.sender] <= _shareAmount\r\n      ? 0\r\n      : userVaultShares[_user][msg.sender] - _shareAmount;\r\n\r\n    userVaultShares[_user][msg.sender] = _updatedShare;\r\n\r\n    // automatically remove vault from the list\r\n    if (_updatedShare == 0) {\r\n      LinkList.List storage _userVaults = userVaults[_user];\r\n      if (_userVaults.getNextOf(LinkList.start) != LinkList.empty) {\r\n        if (_userVaults.has(msg.sender)) {\r\n          _userVaults.remove(msg.sender, _userVaults.getPreviousOf(msg.sender));\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /// @notice Return share of user of given vault\r\n  /// @param _user share owner\r\n  /// @param _vault delta vault\r\n  function getUserVaultShares(address _user, address _vault) external view returns (uint256) {\r\n    return userVaultShares[_user][_vault];\r\n  }\r\n\r\n  function _initOrInsertUserVaults(address _user, address _vault) internal {\r\n    // set user's state\r\n    LinkList.List storage _userVaults = userVaults[_user];\r\n    if (_userVaults.getNextOf(LinkList.start) == LinkList.empty) {\r\n      _userVaults.init();\r\n    }\r\n    if (!_userVaults.has(_vault)) {\r\n      _userVaults.add(_vault);\r\n    }\r\n  }\r\n}\r\n"
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
      },
      "solidity/contracts/8.13/interfaces/ICreditor.sol": {
        "content": "// SPDX-License-Identifier: BUSL\r\n/**\r\n  ∩~~~~∩ \r\n  ξ ･×･ ξ \r\n  ξ　~　ξ \r\n  ξ　　 ξ \r\n  ξ　　 “~～~～〇 \r\n  ξ　　　　　　 ξ \r\n  ξ ξ ξ~～~ξ ξ ξ \r\n　 ξ_ξξ_ξ　ξ_ξξ_ξ\r\nAlpaca Fin Corporation\r\n*/\r\n\r\npragma solidity 0.8.13;\r\n\r\ninterface ICreditor {\r\n  function getUserCredit(address _user) external view returns (uint256);\r\n}\r\n"
      },
      "solidity/contracts/8.13/interfaces/IDeltaNeutralVault.sol": {
        "content": "// SPDX-License-Identifier: BUSL\r\n/**\r\n  ∩~~~~∩ \r\n  ξ ･×･ ξ \r\n  ξ　~　ξ \r\n  ξ　　 ξ \r\n  ξ　　 “~～~～〇 \r\n  ξ　　　　　　 ξ \r\n  ξ ξ ξ~～~ξ ξ ξ \r\n　 ξ_ξξ_ξ　ξ_ξξ_ξ\r\nAlpaca Fin Corporation\r\n*/\r\n\r\npragma solidity 0.8.13;\r\n\r\ninterface IDeltaNeutralVault {\r\n  function shareToValue(uint256 _shareAmount) external view returns (uint256);\r\n}\r\n"
      },
      "solidity/contracts/8.13/utils/LinkList.sol": {
        "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity >=0.6.12 <0.9.0;\r\n\r\nlibrary LinkList {\r\n  address internal constant start = address(1);\r\n  address internal constant end = address(1);\r\n  address internal constant empty = address(0);\r\n\r\n  struct List {\r\n    uint256 llSize;\r\n    mapping(address => address) next;\r\n  }\r\n\r\n  function init(List storage list) internal returns (List storage) {\r\n    list.next[start] = end;\r\n\r\n    return list;\r\n  }\r\n\r\n  function has(List storage list, address addr) internal view returns (bool) {\r\n    return list.next[addr] != empty;\r\n  }\r\n\r\n  function add(List storage list, address addr) internal returns (List storage) {\r\n    require(!has(list, addr), \"existed\");\r\n    list.next[addr] = list.next[start];\r\n    list.next[start] = addr;\r\n    list.llSize++;\r\n\r\n    return list;\r\n  }\r\n\r\n  function remove(\r\n    List storage list,\r\n    address addr,\r\n    address prevAddr\r\n  ) internal returns (List storage) {\r\n    require(has(list, addr), \"!exist\");\r\n    require(list.next[prevAddr] == addr, \"wrong prev\");\r\n    list.next[prevAddr] = list.next[addr];\r\n    list.next[addr] = empty;\r\n    list.llSize--;\r\n\r\n    return list;\r\n  }\r\n\r\n  function getAll(List storage list) internal view returns (address[] memory) {\r\n    address[] memory addrs = new address[](list.llSize);\r\n    address curr = list.next[start];\r\n    for (uint256 i = 0; curr != end; i++) {\r\n      addrs[i] = curr;\r\n      curr = list.next[curr];\r\n    }\r\n    return addrs;\r\n  }\r\n\r\n  function getPreviousOf(List storage list, address addr) internal view returns (address) {\r\n    address curr = list.next[start];\r\n    require(curr != empty, \"!inited\");\r\n    for (uint256 i = 0; curr != end; i++) {\r\n      if (list.next[curr] == addr) return curr;\r\n      curr = list.next[curr];\r\n    }\r\n    return end;\r\n  }\r\n\r\n  function getNextOf(List storage list, address curr) internal view returns (address) {\r\n    return list.next[curr];\r\n  }\r\n\r\n  function length(List storage list) internal view returns (uint256) {\r\n    return list.llSize;\r\n  }\r\n}\r\n"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": true,
        "runs": 1
      },
      "evmVersion": "istanbul",
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "evm.bytecode.object",
            "evm.deployedBytecode.object",
            "abi",
            "evm.bytecode.sourceMap",
            "evm.deployedBytecode.sourceMap",
            "metadata",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "devdoc",
            "userdoc",
            "storageLayout",
            "evm.gasEstimates"
          ]
        }
      },
      "metadata": {
        "useLiteralContent": true
      }
    }
}

