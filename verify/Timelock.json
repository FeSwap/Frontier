{
    "language": "Solidity",
    "sources": {
      "solidity/contracts/6/Timelock.sol": {
        "content": "// COPIED FROM https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/GovernorAlpha.sol\r\n// Copyright 2020 Compound Labs, Inc.\r\n// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\r\n// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\r\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\r\n// 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n//\r\n// Ctrl+f for XXX to see all the modifications.\r\n\r\n// XXX: pragma solidity ^0.5.16;\r\npragma solidity 0.6.6;\r\n\r\nimport \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\n\r\ncontract Timelock is ReentrancyGuard {\r\n  using SafeMath for uint256;\r\n\r\n  event NewAdmin(address indexed newAdmin);\r\n  event NewPendingAdmin(address indexed newPendingAdmin);\r\n  event NewDelay(uint256 indexed newDelay);\r\n  event CancelTransaction(\r\n    bytes32 indexed txHash,\r\n    address indexed target,\r\n    uint256 value,\r\n    string signature,\r\n    bytes data,\r\n    uint256 eta\r\n  );\r\n  event ExecuteTransaction(\r\n    bytes32 indexed txHash,\r\n    address indexed target,\r\n    uint256 value,\r\n    string signature,\r\n    bytes data,\r\n    uint256 eta\r\n  );\r\n  event QueueTransaction(\r\n    bytes32 indexed txHash,\r\n    address indexed target,\r\n    uint256 value,\r\n    string signature,\r\n    bytes data,\r\n    uint256 eta\r\n  );\r\n\r\n  uint256 public constant GRACE_PERIOD = 14 days;\r\n  uint256 public constant MINIMUM_DELAY = 1 days;\r\n  uint256 public constant MAXIMUM_DELAY = 30 days;\r\n\r\n  address public admin;\r\n  address public pendingAdmin;\r\n  uint256 public delay;\r\n  bool public admin_initialized;\r\n\r\n  mapping(bytes32 => bool) public queuedTransactions;\r\n\r\n  // delay_ in seconds\r\n  constructor(address admin_, uint256 delay_) public {\r\n    require(delay_ >= MINIMUM_DELAY, \"Timelock::constructor: Delay must exceed minimum delay.\");\r\n    require(delay_ <= MAXIMUM_DELAY, \"Timelock::constructor: Delay must not exceed maximum delay.\");\r\n\r\n    admin = admin_;\r\n    delay = delay_;\r\n    admin_initialized = false;\r\n  }\r\n\r\n  // XXX: function() external payable { }\r\n  receive() external payable {}\r\n\r\n  function setDelay(uint256 delay_) external {\r\n    require(msg.sender == address(this), \"Timelock::setDelay: Call must come from Timelock.\");\r\n    require(delay_ >= MINIMUM_DELAY, \"Timelock::setDelay: Delay must exceed minimum delay.\");\r\n    require(delay_ <= MAXIMUM_DELAY, \"Timelock::setDelay: Delay must not exceed maximum delay.\");\r\n    delay = delay_;\r\n\r\n    emit NewDelay(delay);\r\n  }\r\n\r\n  function acceptAdmin() external {\r\n    require(msg.sender == pendingAdmin, \"Timelock::acceptAdmin: Call must come from pendingAdmin.\");\r\n    admin = msg.sender;\r\n    pendingAdmin = address(0);\r\n\r\n    emit NewAdmin(admin);\r\n  }\r\n\r\n  function setPendingAdmin(address pendingAdmin_) external {\r\n    // allows one time setting of admin for deployment purposes\r\n    if (admin_initialized) {\r\n      require(msg.sender == address(this), \"Timelock::setPendingAdmin: Call must come from Timelock.\");\r\n    } else {\r\n      require(msg.sender == admin, \"Timelock::setPendingAdmin: First call must come from admin.\");\r\n      admin_initialized = true;\r\n    }\r\n    pendingAdmin = pendingAdmin_;\r\n\r\n    emit NewPendingAdmin(pendingAdmin);\r\n  }\r\n\r\n  function queueTransaction(\r\n    address target,\r\n    uint256 value,\r\n    string calldata signature,\r\n    bytes calldata data,\r\n    uint256 eta\r\n  ) external returns (bytes32) {\r\n    require(msg.sender == admin, \"Timelock::queueTransaction: Call must come from admin.\");\r\n    require(\r\n      eta >= getBlockTimestamp().add(delay),\r\n      \"Timelock::queueTransaction: Estimated execution block must satisfy delay.\"\r\n    );\r\n\r\n    bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\r\n    queuedTransactions[txHash] = true;\r\n\r\n    emit QueueTransaction(txHash, target, value, signature, data, eta);\r\n    return txHash;\r\n  }\r\n\r\n  function cancelTransaction(\r\n    address target,\r\n    uint256 value,\r\n    string calldata signature,\r\n    bytes calldata data,\r\n    uint256 eta\r\n  ) external {\r\n    require(msg.sender == admin, \"Timelock::cancelTransaction: Call must come from admin.\");\r\n\r\n    bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\r\n    queuedTransactions[txHash] = false;\r\n\r\n    emit CancelTransaction(txHash, target, value, signature, data, eta);\r\n  }\r\n\r\n  // XXX: add _getRevertMsg to get revert message from call stack\r\n  function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\r\n    // If the _res length is less than 68, then the transaction failed silently (without a revert message)\r\n    if (_returnData.length < 68) return \"Transaction reverted silently\";\r\n\r\n    assembly {\r\n      // Slice the sighash.\r\n      _returnData := add(_returnData, 0x04)\r\n    }\r\n    return abi.decode(_returnData, (string)); // All that remains is the revert string\r\n  }\r\n\r\n  function executeTransaction(\r\n    address target,\r\n    uint256 value,\r\n    string calldata signature,\r\n    bytes calldata data,\r\n    uint256 eta\r\n  ) external payable nonReentrant returns (bytes memory) {\r\n    require(msg.sender == admin, \"Timelock::executeTransaction: Call must come from admin.\");\r\n\r\n    bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\r\n    require(queuedTransactions[txHash], \"Timelock::executeTransaction: Transaction hasn't been queued.\");\r\n    require(getBlockTimestamp() >= eta, \"Timelock::executeTransaction: Transaction hasn't surpassed time lock.\");\r\n    require(getBlockTimestamp() <= eta.add(GRACE_PERIOD), \"Timelock::executeTransaction: Transaction is stale.\");\r\n\r\n    queuedTransactions[txHash] = false;\r\n\r\n    bytes memory callData;\r\n\r\n    if (bytes(signature).length == 0) {\r\n      callData = data;\r\n    } else {\r\n      callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\r\n    }\r\n\r\n    // solium-disable-next-line security/no-call-value\r\n    (bool success, bytes memory returnData) = target.call{ value: value }(callData);\r\n    require(success, _getRevertMsg(returnData));\r\n\r\n    emit ExecuteTransaction(txHash, target, value, signature, data, eta);\r\n\r\n    return returnData;\r\n  }\r\n\r\n  function getBlockTimestamp() internal view returns (uint256) {\r\n    // solium-disable-next-line security/no-block-members\r\n    return block.timestamp;\r\n  }\r\n}\r\n"
      },
      "@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol": {
        "content": "pragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
      },
      "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
      },
      "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol": {
        "content": "pragma solidity >=0.4.24 <0.7.0;\n\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    address self = address(this);\n    uint256 cs;\n    assembly { cs := extcodesize(self) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": true,
        "runs": 1
      },
      "evmVersion": "istanbul",
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "evm.bytecode.object",
            "evm.deployedBytecode.object",
            "abi",
            "evm.bytecode.sourceMap",
            "evm.deployedBytecode.sourceMap",
            "metadata",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "devdoc",
            "userdoc",
            "storageLayout",
            "evm.gasEstimates"
          ]
        }
      },
      "metadata": {
        "useLiteralContent": true
      }
    }
}
